#TODO
-----------------------------------------
Classes:
- Students
   - student_majors
- Majors
- Departments
- Courses
- Sections
- Enrollments
   - enrollment_details
-----------------------------------------
Main.py
- 
-----------------------------------------
Miscallaneous Work:
Department
  i. {name}
  ii. {abbreviation}
  iii. {chairName}
  iv. {building, office}
c. Course
  i. {departmentAbbreviation, courseNumber} – Note that you can use
      departmentName instead of departmentAbbreviation if you choose to "migrate"
      that into Course.
  ii. {departmentAbbreviation, courseName}
d. Section
  i. {course, sectionNumber, semester, sectionYear} – Note that course here
      represents whatever attributes you migrate from Course into Section.
  ii. {semester, sectionYear, building, room, schedule, startTime}
  iii. {semester, sectionYear, schedule, startTime, instructor}
e. Student
  i. {lastName, firstName} – even though we all know this combination is hardly
      useful as a uniqueness constraint in the real world.
  ii. {eMail}
  iii. {_id} – note, you don't have to worry about creating and managing a separate
        student_id since MongoDB will give you one whether you ask for it or not.
f. Major
  i. {name}
g. StudentMajor
  i. {student, majorName} – Just which attributes go into this uniqueness constraint
      will depend upon what you "migrate" in from Student.
  h. Enrollment
  i. {student, section} – The exact attributes in this uniqueness constraint will
      depend upon what migrates in to uniquely identify the Student instance
      who is enrolled and the Section instance that they enrolled in.
  ii. {semester, sectionYear, departmentAbbreviation, courseNumber, studentID}
      1. This one is new. Essentially, we are making sure that no student can be
      enrolled in more than one section of the same course during the same
      semester.
      2. You may or may not "migrate" departmentAbbreviation and
      courseNumber into Enrollment. If not, you will have to implement this
      constraint by performing one or more queries in the database.
